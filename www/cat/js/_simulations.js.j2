catjs.simulations = function() {
  var makeTable = function(data, keys) {
    var table = "";

    for (var i = 0; i < data.length; i++) {
      var row = data[i];
      var clazz = "status-" + row["Status"];

      table += '<tr class="' + clazz + '">';
      table += '<td class="status">' + row["Status"] + '</td>';

      table += '<td class="start-time">';
      if (row["StartTime"]) {
        table += new Date(row["StartTime"]).toLocaleString();
      }
      table += '</td>';

      table += '<td class="end-time">';
      if (row["EndTime"]) {
        table += new Date(row["EndTime"]).toLocaleString();
      }
      table += '</td>';

      table += '<td class="data">';

      if (row["STDOUT"]) {
        table += '<a href="' + row["STDOUT"] + '">out</a>';
      } else {
        table += '<span class="no-data">out</span>';
      }

      if (row["STDERR"]) {
        table += '<a href="' + row["STDERR"] + '">err</a>';
      } else {
        table += '<span class="no-data">err</span>';
      }

      if (row["Replay"]) {
        table += '<a href="/cat/visualizer.html?' + row["Replay"] +'">replay</a>';
      } else {
        table += '<span class="no-data">replay</span>';
      }

      table += '</td>';
      table += '<td class="command">' + row["Command"] + '</td>';

      table += "</tr>";
    }

    return table;
  };

  var updateTable = function(data) {
    var table = '<tr>';
    table += '<th class="status">Status</th>'
    table += '<th class="start-time">Start Time</th>'
    table += '<th class="end-time">End Time</th>'
    table += '<th class="data">Data</th>'
    table += '<th class="command">Command</th>'
    table += '</tr>';
    table += makeTable(data);

    document.getElementById('sims-list').innerHTML = table;
    filterRows();
  };

  var setNoData = function() {
    var table = document.getElementById('sims-list');
    table.innerHTML = "<tr><th>No data yet</th></tr>";
  };

  var filterRows = function() {
    var rows = document.querySelectorAll("#sims-list tr");
    var shown = 0;

    for(var i = 1; i < rows.length; i++) {
      var row = rows[i];

      var show = filterStatus(row)
        && filterCommand(row);

      row.classList.remove('even');
      row.classList.remove('odd');

      if (show) {
        row.classList.add('visible');
        row.classList.add(shown % 2 == 0 ? 'even' : 'odd');
        shown++;
      } else {
        row.classList.remove('visible');
      }
    }

    document.getElementById('shown-count').innerHTML = shown;
    document.getElementById('total-count').innerHTML = rows.length - 1;
  };

  var filterStatus = function(row) {
    var statusFilters = document.getElementsByClassName("filter-status");

    var m = (" " + row.className + " ").match(/ status-(\w+) /);
    if (m) {
      var rowStatus = m[1];

      for(var i = 0; i < statusFilters.length; i++) {
        var f = statusFilters[i];

        if (!f.checked && f.value === rowStatus) {
          return false;
        }
      }
    }

    return true;
  };

  var filterCommand = function(row) {
    var filter = document.getElementById("filter-command").value || "";
    filter = filter.trim();

    var cmds = row.getElementsByClassName("command");
    var cmd;

    if (cmds.length == 1) {
      cmd = cmds[0].innerHTML.trim();
    }

    if (filter !== "" && cmd) {
      var re = new RegExp(filter);
      return re.test(cmd);
    }

    return true;
  };

  var setup = function() {
    var statuses = catjs.queryParam("status");
    if (statuses) {
      statuses = statuses.split(",");
    }

    var statusFilters = document.getElementsByClassName("filter-status");

    for(var i = 0; i < statusFilters.length; i++) {
      var f = statusFilters[i];

      if (statuses && statuses.indexOf(f.value) < 0) {
        f.checked = false;
      }

      f.addEventListener("change", filterRows);
    }

    var cmdFilter = document.getElementById("filter-command");
    cmdFilter.value = catjs.queryParam("command") || "";
    cmdFilter.addEventListener("input", filterRows);
  };

  return {
    update: function() {
      var au = new catjs.Autoupdater('/cat/data/simulations.json', 10000,
        updateTable, setNoData);

      au.start();
    },
    setup: setup
  };
}();
